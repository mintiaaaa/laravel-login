services:

  mysql:
    image: mysql/mysql-server:latest
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: my_app
      MYSQL_USER: my_app_user
      MYSQL_PASSWORD: my_app_password
      TZ: 'Asia/Tokyo'
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
      # command: --default-authentication-plugin=mysql_native_password --mysql-native-password=ON
      # command: >
    # chown -hR mysql:mysql /usr/sbin/mysqld
    # && chown -hR mysql:mysql /var/lib/mysql
    volumes:
      #  - docker-db:/var/lib/mysql
      - ./.docker/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
    # restart: always
    ports:
      - "3306:3306"
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: mysql
      PMA_USER: my_app_user
      PMA_PASSWORD: my_app_password
      UPLOAD_LIMIT: 128M
      MEMORY_LIMIT: 512M
      TZ: 'Asia/Tokyo'
    links:
      - mysql
    ports:
      - "8080:80"
    # volumes:
    #    - ./.docker/phpmyadmin/sessions:/sessions
    depends_on:
      - mysql
    networks:
      - app-network

  nginx:
    build: .docker/nginx/.
    volumes:
      - ./public:/app/public
    ports:
      - "80:80"
      # - "443:443"
    links:
      - app
    networks:
      - app-network

  app:
    build: .docker/php-fpm/.
    volumes:
      - ./:/app
    working_dir: /app
    links:
      - mysql
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      DB_HOST: mysql
#    depends_on:
#      - elasticsearch
    networks:
      - app-network

#  echo-server:
#    build: .docker/echo-server/.
#    ports:
#      - "6001:6001"
#    command: laravel-echo-server start --config ./laravel-echo-server.json --force
#    volumes:
#      - ./:/app
#    working_dir: /app
#    environment:
#      - LARAVEL_ECHO_SERVER_DEBUG=true
#    depends_on:
#      - app
#      - redis
#    networks:
#      - app-network

#  redis:
#    image: redis:latest
#    ports:
#      - "6379:6379"
#    volumes:
#      - ./.docker/redis/data:/data
#    command: redis-server --loglevel notice --logfile /data/redis.log
#    networks:
#      - app-network

#  minio:
#    image: minio/minio:RELEASE.2024-06-11T03-13-30Z
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    volumes:
#      - minio:/minio
#    environment:
#      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
#      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
#    entrypoint: sh
#    command: -c "mkdir -p minio/local-contents && minio server /minio --address :9000 --console-address :9001"
#    networks:
#      - app-network
#
#  minio-mc:
#    image: minio/mc:RELEASE.2024-06-12T14-34-03Z
#    depends_on:
#      - minio
#    environment:
#      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
#      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
#      BUCKET_NAME: "${MINIO_BUCKET}"
#      ENDPOINT: "${MINIO_ENDPOINT}"
#    entrypoint: >
#      /bin/sh -c "
#      until (/usr/bin/mc config host add minio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD --insecure) do echo '...waiting...' && sleep 5; done;
#      /usr/bin/mc alias set minio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD --insecure;
#      /usr/bin/mc mb --ignore-existing minio/local-contents;
#      /usr/bin/mc anonymous set public minio/local-contents --insecure;
#      tail -f /dev/null
#      "
#    networks:
#      - app-network

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#      - xpack.security.enabled=false
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    volumes:
#      - elasticsearch-data:/usr/share/elasticsearch/data
#    networks:
#      - app-network
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.1.0
#    environment:
#      ELASTICSEARCH_URL: http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - app-network

  mail:
    image: axllent/mailpit
    ports:
      - "8025:8025"
    networks:
      - app-network

volumes:
  docker-db:
    driver: local
#  minio:
#    driver: local
#  elasticsearch-data:
#    driver: local

networks:
  app-network:
    driver: bridge